{"version":3,"sources":["CandyMachine/index.js","assets/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["programs","metadata","Metadata","MetadataProgram","config","web3","PublicKey","process","SystemProgram","opts","CandyMachine","walletAddress","useState","machineStats","setMachineStats","mints","setMints","isMinting","setIsMinting","isLoadingMints","setIsLoadingMints","useEffect","getCandyMachineState","getProvider","connection","Connection","Provider","window","solana","a","provider","Program","fetchIdl","candyMachineProgram","idl","program","account","candyMachine","fetch","itemsAvailable","data","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toGMTString","console","log","fetchHashTable","length","mint","uri","response","json","parse","find","image","prevState","hash","metadataEnabled","getProgramAccounts","filters","memcmp","offset","bytes","metadataAccounts","mintHashes","index","getParsedAccountInfo","pubkey","accountInfo","toString","value","push","getMetadata","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMasterEdition","getTokenWallet","wallet","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintToken","Keypair","generate","publicKey","token","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","accounts","payer","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","rpc","mintNft","txn","onSignatureWithOptions","notification","context","type","result","err","commitment","message","msg","code","indexOf","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction","className","onClick","disabled","map","src","alt","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","alert","error","connectWallet","onLoad","addEventListener","removeEventListener","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6fe191d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { programs } from \"@metaplex/js\";\nimport \"./CandyMachine.css\";\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./helpers\";\nconst {\n  metadata: { Metadata, MetadataProgram },\n} = programs;\n\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = ({ walletAddress }) => {\n  // State\n  const [machineStats, setMachineStats] = useState(null);\n  const [mints, setMints] = useState([]);\n  const [isMinting, setIsMinting] = useState(false);\n  const [isLoadingMints, setIsLoadingMints] = useState(false);\n\n  // Actions\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // Create a new connection object\n    const connection = new Connection(rpcHost);\n\n    // Create a new Solana provider object\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n\n    return provider;\n  };\n\n  // Declare getCandyMachineState as an async method\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n    const program = new Program(idl, candyMachineProgram, provider);\n    const candyMachine = await program.account.candyMachine.fetch(\n      process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toGMTString()}`;\n\n    // Add this data to your state to render\n    setMachineStats({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n    // Set loading flag.\n    setIsLoadingMints(true);\n\n    const data = await fetchHashTable(\n      process.env.REACT_APP_CANDY_MACHINE_ID,\n      true\n    );\n\n    if (data.length !== 0) {\n      for (const mint of data) {\n        // Get URI\n        const response = await fetch(mint.data.uri);\n        const parse = await response.json();\n        console.log(\"Past Minted NFT\", mint);\n        // Get image URI\n        if (!mints.find((mint) => mint === parse.image)) {\n          setMints((prevState) => [...prevState, parse.image]);\n        }\n      }\n    }\n\n    // Remove loading flag.\n    setIsLoadingMints(false);\n  };\n\n  const renderMintedItems = () => (\n    <div className=\"gif-container\">\n      <p className=\"sub-text\">Minted Items ✨</p>\n      <div className=\"gif-grid\">\n        {mints.map((mint) => (\n          <div className=\"gif-item\" key={mint}>\n            <img src={mint} alt={`Minted NFT ${mint}`} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const fetchHashTable = async (hash, metadataEnabled) => {\n    const connection = new web3.Connection(\n      process.env.REACT_APP_SOLANA_RPC_HOST\n    );\n\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(\n      connection,\n      {\n        filters: [\n          {\n            memcmp: {\n              offset:\n                1 +\n                32 +\n                32 +\n                4 +\n                MAX_NAME_LENGTH +\n                4 +\n                MAX_URI_LENGTH +\n                4 +\n                MAX_SYMBOL_LENGTH +\n                2 +\n                1 +\n                4 +\n                0 * MAX_CREATOR_LEN,\n              bytes: hash,\n            },\n          },\n        ],\n      }\n    );\n\n    const mintHashes = [];\n\n    for (let index = 0; index < metadataAccounts.length; index++) {\n      const account = metadataAccounts[index];\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\n      if (metadataEnabled) mintHashes.push(metadata.data);\n      else mintHashes.push(metadata.data.mint);\n    }\n\n    return mintHashes;\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"metadata\"),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from(\"metadata\"),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from(\"edition\"),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (\n      await web3.PublicKey.findProgramAddress(\n        [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const mintToken = async () => {\n    try {\n      // Add this here\n      setIsMinting(true);\n      const mint = web3.Keypair.generate();\n      const token = await getTokenWallet(\n        walletAddress.publicKey,\n        mint.publicKey\n      );\n      const metadata = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n      const connection = new Connection(rpcHost);\n      const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      );\n\n      const accounts = {\n        config,\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n        payer: walletAddress.publicKey,\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\n      };\n\n      const signers = [mint];\n      const instructions = [\n        web3.SystemProgram.createAccount({\n          fromPubkey: walletAddress.publicKey,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports: rent,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          walletAddress.publicKey,\n          walletAddress.publicKey\n        ),\n        createAssociatedTokenAccountInstruction(\n          token,\n          walletAddress.publicKey,\n          walletAddress.publicKey,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          token,\n          walletAddress.publicKey,\n          [],\n          1\n        ),\n      ];\n\n      const provider = getProvider();\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\n      const program = new Program(idl, candyMachineProgram, provider);\n\n      const txn = await program.rpc.mintNft({\n        accounts,\n        signers,\n        instructions,\n      });\n\n      console.log(\"txn:\", txn);\n\n      // Setup listener\n      connection.onSignatureWithOptions(\n        txn,\n        async (notification, context) => {\n          if (notification.type === \"status\") {\n            console.log(\"Received status event\");\n\n            const { result } = notification;\n            if (!result.err) {\n              console.log(\"NFT Minted!\");\n              // Set our flag to false as our NFT has been minted!\n              setIsMinting(false);\n              await getCandyMachineState();\n            }\n          }\n        },\n        { commitment: \"processed\" }\n      );\n    } catch (error) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      // If we have an error set our loading flag to false\n      setIsMinting(false);\n\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      console.warn(message);\n    }\n  };\n\n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  return (\n    machineStats && (\n      <div className=\"machine-container\">\n        <p>{`Items Minted: ${machineStats.itemsRedeemed} / ${machineStats.itemsAvailable}`}</p>\n        {/* Check to see if these properties are equal! */}\n        {machineStats.itemsRedeemed === machineStats.itemsAvailable ? (\n          <p className=\"sub-text\">Sold Out 🙊</p>\n        ) : (\n          <button\n            className=\"cta-button mint-button\"\n            onClick={mintToken}\n            disabled={isMinting}\n          >\n            Mint NFT\n          </button>\n        )}\n        {mints.length > 0 && renderMintedItems()}\n        {isLoadingMints && <p>LOADING MINTS...</p>}\n      </div>\n    )\n  );\n};\n\nexport default CandyMachine;\n","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport CandyMachine from \"./CandyMachine\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">🥷 Ninja Drop</p>\n          <p className=\"sub-text\">NFT drop machine with fair mint</p>\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        {/* Check for walletAddress and then pass in walletAddress */}\n        {walletAddress && <CandyMachine walletAddress={window.solana} />}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n};\n"],"sourceRoot":""}